version: 2.1

description: |
  Use the Harbormaster Orb to generate fully functional and deployable
  projects from a single "project-as-code" YAML file. The result is an MVP quality application based on your
  business model using one of the many supported technology stacks.

  Growing list of tech stacks include -
  Apollo, Angular7, Django, Go, Ruby on Rails, Spring Boot, AWS Lambda,
  Google Functions, ASP.NET, Spark Microweb and Struts2.

  Support Model Formats -
  YAML, JSON, UML, XMI, Eclipse Model Framework, Java source code in a GIT repo, and SQL Scripts.

  Use the following as an example how to use the Harbormaster Orb
  https://github.com/Harbormaster-AI/circle.ci.orb/blob/main/src/examples/run-harbormaster.yml

display:
  source_url: "https://github.com/Harbormaster-AI/circle.ci.orb"
  home_url: "https://harbormaster.ai"

jobs:
  generate:
    docker:
      - image: 'circleci/node:latest'
    parameters:
      api-token:
        description: |
          Register at platform.harbormaster.ai to get your own API token and assign a
          Personal Git Access Token to ensure uninterrupted secure Git commits by Harbormaster

          Next, create an environmental variable on CircleCI, assign it your Harbormaster
          API token, and finally apply the variable name here.

          See https://circleci.com/docs/2.0/env-vars/
          for more details on assigning an environment variable.
        type: env_var_name
        default: HARBORMASTER_API_TOKEN

      project-as-code-yaml-file:
        description: |
          A Project-as-Code YAML file to apply during DevOps project generation.

          See example project-as-code files at
            - https://github.com/Harbormaster-AI/circle.ci.orb/tree/main/src/examples/project.as.code
        type: string

    steps:

      - checkout:
          path: "~/${CIRCLE_PROJECT_REPONAME}"

      - initialize:
          api-token: <<parameters.api-token>>

      - generate_devops_project:
          project-as-code-yaml-file: <<parameters.project-as-code-yaml-file>>

commands:
  initialize:
    parameters:
      api-token:
        description: "Your Harbormaster API token"
        type: env_var_name
        default: HARBORMASTER_API_TOKEN
    steps:
      - run:
          name: Harbormaster initialization
          environment:
            USER_HARBORMASTER_API_TOKEN: <<parameters.api-token>>
          command: sh  ./src/scripts/initialize.sh

  generate_devops_project:
    parameters:
      project-as-code-yaml-file:
        description: "A Project-as-Code YAML file to apply during DevOps project generation"
        type: string
    steps:
      - run:
          name: Generating DevOps Project
          environment:
            HARBORMASTER_PROJECT_AS_CODE_YAML_FILE: <<parameters.project-as-code-yaml-file>>
          command: sh  ./src/scripts/generate_devops_project.sh
