version: 2.1

description: |
  Use the Harbormaster Orb to generate fully functional and deployable
  projects from a single "project-as-code" YAML file. The result is an MVP quality application based on your
  business model using one of the many supported technology stacks.

  Growing list of tech stacks include -
  Apollo, Angular7, Django, Go, Ruby on Rails, Spring Boot, AWS Lambda,
  Google Functions, ASP.NET, Spark Microweb and Struts2.

  Support Model Formats -
  YAML, JSON, UML, XMI, Eclipse Model Framework, Java source code in a GIT repo, and SQL Scripts.

  Use the following as an example how to use the Harbormaster Orb
  https://github.com/Harbormaster-AI/circle.ci.orb/blob/main/src/examples/run-harbormaster.yml

display:
  source_url: "https://github.com/Harbormaster-AI/circle.ci.orb"
  home_url: "https://harbormaster.ai"

jobs:

  generate:

    description: |
      Initialization and usage of the Harbormaster project generator Orb.

      api-token -

      Register at platform.harbormaster.ai to get your own API token and assign a
      Personal Git Access Token to ensure uninterrupted secure Git commits by Harbormaster

      Next, create an environmental variable on CircleCI, assign it your Harbormaster
      API token, and finally apply the variable name here.

      See https://circleci.com/docs/2.0/env-vars/
      for more details on assigning an environment variable.

      project-as-code-yaml-file -

      A Project-as-Code YAML file to apply during DevOps project generation.

      See example project-as-code files at
      - https://github.com/Harbormaster-AI/circle.ci.orb/tree/main/src/examples/project.as.code

    docker:
      - image: 'circleci/node:latest'

    parameters:

      api-token:
        description: "Your Harbormaster API token"
        type: env_var_name

      project-as-code-yaml-file:
        description: "A Project-as-Code YAML file to apply during DevOps project generation"
        type: string

    steps:
      - generate_devops_project:
          api-token: <<parameters.api-token>>
          project-as-code-yaml-file: <<parameters.project-as-code-yaml-file>>

commands:

  generate_devops_project:

    description: |
      Command to initialize the Harbormaster orb by providing your Harbormaster API token then generate the project

      This token is obtained from your online account under User Preferences on http://platform.harbormaster.com.

      Assign this token as an environment variable on CircleCI.

      See https://circleci.com/docs/2.0/env-vars/
      for more details on assigning an environment variable.

    parameters:
      api-token:
        description: "A user's Harbormaster API token"
        type: env_var_name
        default: HARBORMASTER_API_TOKEN

      project-as-code-yaml-file:
        description: "A Project-as-Code YAML file to apply during DevOps project generation"
        type: string

    steps:

      - checkout:
          path: "~/${CIRCLE_PROJECT_REPONAME}"

      - run:
          name: update npm
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO npm install -g npm@latest'

      - run:
          name: install npm-run
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO npm install -g npm-run@latest'

      - run:
          name: install Harbormaster CLI
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO npm install -g harbormaster-ai'

      - run:
          name: initialize user for Harbormaster
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO npm-run harbormaster init $<<parameters.api-token>>'

      - run:
          name: update the apt-get package index
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO apt-get update'

      - run:
          name: install dos2unix to convert uploaded files
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO apt-get install -y dos2unix'

      - run:
          name: Generating application
          command: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO npm-run harbormaster project_generate ~/${CIRCLE_PROJECT_REPONAME}/<< parameters.project-as-code-yaml-file >>'
